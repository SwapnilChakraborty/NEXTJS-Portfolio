{"version":3,"file":"sdkMultiplexerLoader.js","sources":["../../../../src/config/loaders/sdkMultiplexerLoader.ts"],"sourcesContent":["import type { LoaderThis } from './types';\n\ntype LoaderOptions = {\n  importTarget: string;\n};\n\n/**\n * This loader allows us to multiplex SDKs depending on what is passed to the `importTarget` loader option.\n * If this loader encounters a file that contains the string \"__SENTRY_SDK_MULTIPLEXER__\" it will replace it's entire\n * content with an \"export all\"-statement that points to `importTarget`.\n *\n * In our case we use this to multiplex different SDKs depending on whether we're bundling browser code, server code,\n * or edge-runtime code.\n */\nexport default function sdkMultiplexerLoader(this: LoaderThis<LoaderOptions>, userCode: string): string {\n  if (!userCode.includes('_SENTRY_SDK_MULTIPLEXER')) {\n    return userCode;\n  }\n\n  // We know one or the other will be defined, depending on the version of webpack being used\n  const { importTarget } = 'getOptions' in this ? this.getOptions() : this.query;\n\n  return `export * from \"${importTarget}\";`;\n}\n"],"names":[],"mappings":";;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,oBAAoB,EAAkC,QAAQ,EAAkB;AACxG,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE;AACrD,IAAI,OAAO,QAAQ,CAAA;AACnB,GAAE;AACF;AACA;AACA,EAAE,MAAM,EAAE,YAAA,EAAe,GAAE,gBAAgB,IAAA,GAAO,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,KAAK,CAAA;AAChF;AACA,EAAE,OAAO,CAAC,eAAe,EAAE,YAAY,CAAC,EAAE,CAAC,CAAA;AAC3C;;;;"}