{"version":3,"file":"valueInjectionLoader.js","sources":["../../../../src/config/loaders/valueInjectionLoader.ts"],"sourcesContent":["import type { LoaderThis } from './types';\n\ntype LoaderOptions = {\n  values: Record<string, unknown>;\n};\n\n/**\n * Set values on the global/window object at the start of a module.\n *\n * Options:\n *   - `values`: An object where the keys correspond to the keys of the global values to set and the values\n *        correspond to the values of the values on the global object. Values must be JSON serializable.\n */\nexport default function valueInjectionLoader(this: LoaderThis<LoaderOptions>, userCode: string): string {\n  // We know one or the other will be defined, depending on the version of webpack being used\n  const { values } = 'getOptions' in this ? this.getOptions() : this.query;\n\n  // We do not want to cache injected values across builds\n  this.cacheable(false);\n\n  // Define some global proxy that works on server and on the browser.\n  let injectedCode =\n    'var _sentryCollisionFreeGlobalObject = typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : {};\\n';\n\n  Object.entries(values).forEach(([key, value]) => {\n    injectedCode += `_sentryCollisionFreeGlobalObject[\"${key}\"] = ${JSON.stringify(value)};\\n`;\n  });\n\n  return `${injectedCode}\\n${userCode}`;\n}\n"],"names":[],"mappings":";;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAAS,oBAAoB,EAAkC,QAAQ,EAAkB;AACxG;AACA,EAAE,MAAM,EAAE,MAAA,EAAS,GAAE,gBAAgB,IAAA,GAAO,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,KAAK,CAAA;AAC1E;AACA;AACA,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;AACvB;AACA;AACA,EAAE,IAAI,YAAa;AACnB,IAAI,kKAAkK,CAAA;AACtK;AACA,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK;AACnD,IAAI,gBAAgB,CAAC,kCAAkC,EAAE,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAA;AAC9F,GAAG,CAAC,CAAA;AACJ;AACA,EAAE,OAAO,CAAC,EAAA,YAAA,CAAA,EAAA,EAAA,QAAA,CAAA,CAAA,CAAA;AACA;;;;"}