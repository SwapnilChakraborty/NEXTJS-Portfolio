import type { BrowserOptions } from '@sentry/react';
import type { Integration } from '@sentry/types';
import { BrowserTracing } from './browserTracingIntegration';
import { rewriteFramesIntegration } from './rewriteFramesIntegration';
export * from '@sentry/react';
export { nextRouterInstrumentation } from './routing/nextRoutingInstrumentation';
export { captureUnderscoreErrorException } from '../common/_error';
/** @deprecated Import the integration function directly, e.g. `inboundFiltersIntegration()` instead of `new Integrations.InboundFilter(). */
export declare const Integrations: {
    BrowserTracing: typeof BrowserTracing;
    GlobalHandlers: import("@sentry/types").IntegrationClass<Integration & {
        setup: (client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: Partial<{
        onerror: boolean;
        onunhandledrejection: boolean;
    }> | undefined) => Integration);
    TryCatch: import("@sentry/types").IntegrationClass<Integration> & (new (options?: {
        setTimeout: boolean;
        setInterval: boolean;
        requestAnimationFrame: boolean;
        XMLHttpRequest: boolean;
        eventTarget: boolean | string[];
    } | undefined) => Integration);
    Breadcrumbs: import("@sentry/types").IntegrationClass<Integration & {
        setup: (client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: Partial<{
        console: boolean;
        dom: boolean | {
            serializeAttribute?: string | string[] | undefined;
            maxStringLength?: number | undefined;
        };
        fetch: boolean;
        history: boolean;
        sentry: boolean;
        xhr: boolean;
    }> | undefined) => Integration);
    LinkedErrors: import("@sentry/types").IntegrationClass<Integration & {
        preprocessEvent: (event: import("@sentry/react").Event, hint: import("@sentry/react").EventHint, client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: {
        key?: string | undefined;
        limit?: number | undefined;
    } | undefined) => Integration);
    HttpContext: import("@sentry/types").IntegrationClass<Integration & {
        preprocessEvent: (event: import("@sentry/react").Event) => void;
    }>;
    Dedupe: import("@sentry/types").IntegrationClass<Integration & {
        processEvent: (event: import("@sentry/react").Event) => import("@sentry/react").Event;
    }>;
    FunctionToString: import("@sentry/types").IntegrationClass<Integration & {
        setupOnce: () => void;
    }>;
    InboundFilters: import("@sentry/types").IntegrationClass<Integration & {
        preprocessEvent: (event: import("@sentry/react").Event, hint: import("@sentry/react").EventHint, client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: Partial<{
        allowUrls: (string | RegExp)[];
        denyUrls: (string | RegExp)[];
        ignoreErrors: (string | RegExp)[];
        ignoreTransactions: (string | RegExp)[];
        ignoreInternal: boolean;
        disableErrorDefaults: boolean;
        disableTransactionDefaults: boolean;
    }> | undefined) => Integration);
};
export { BrowserTracing, rewriteFramesIntegration };
/** Inits the Sentry NextJS SDK on the browser with the React SDK. */
export declare function init(options: BrowserOptions): void;
/**
 * Just a passthrough in case this is imported from the client.
 */
export declare function withSentryConfig<T>(exportedUserNextConfig: T): T;
export { browserTracingIntegration } from './browserTracingIntegration';
export * from '../common';
//# sourceMappingURL=index.d.ts.map