{"version":3,"file":"pagesRouterRoutingInstrumentation.js","sources":["../../../../src/client/routing/pagesRouterRoutingInstrumentation.ts"],"sourcesContent":["import type { ParsedUrlQuery } from 'querystring';\nimport { getClient, getCurrentScope } from '@sentry/core';\nimport { WINDOW } from '@sentry/react';\nimport type { Primitive, StartSpanOptions, Transaction, TransactionContext, TransactionSource } from '@sentry/types';\nimport {\n  browserPerformanceTimeOrigin,\n  logger,\n  stripUrlQueryAndFragment,\n  tracingContextFromHeaders,\n} from '@sentry/utils';\nimport type { NEXT_DATA as NextData } from 'next/dist/next-server/lib/utils';\nimport { default as Router } from 'next/router';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\n\nconst globalObject = WINDOW as typeof WINDOW & {\n  __BUILD_MANIFEST?: {\n    sortedPages?: string[];\n  };\n};\n\ntype StartTransactionCb = (context: TransactionContext) => Transaction | undefined;\ntype StartSpanCb = (context: StartSpanOptions) => void;\n\n/**\n * Describes data located in the __NEXT_DATA__ script tag. This tag is present on every page of a Next.js app.\n */\ninterface SentryEnhancedNextData extends NextData {\n  props: {\n    pageProps?: {\n      _sentryTraceData?: string; // trace parent info, if injected by a data-fetcher\n      _sentryBaggage?: string; // baggage, if injected by a data-fetcher\n      // These two values are only injected by `getStaticProps` in a very special case with the following conditions:\n      // 1. The page's `getStaticPaths` method must have returned `fallback: 'blocking'`.\n      // 2. The requested page must be a \"miss\" in terms of \"Incremental Static Regeneration\", meaning the requested page has not been generated before.\n      // In this case, a page is requested and only served when `getStaticProps` is done. There is not even a fallback page or similar.\n    };\n  };\n}\n\ninterface NextDataTagInfo {\n  route?: string;\n  params?: ParsedUrlQuery;\n  sentryTrace?: string;\n  baggage?: string;\n}\n\n/**\n * Every Next.js page (static and dynamic ones) comes with a script tag with the id \"__NEXT_DATA__\". This script tag\n * contains a JSON object with data that was either generated at build time for static pages (`getStaticProps`), or at\n * runtime with data fetchers like `getServerSideProps.`.\n *\n * We can use this information to:\n * - Always get the parameterized route we're in when loading a page.\n * - Send trace information (trace-id, baggage) from the server to the client.\n *\n * This function extracts this information.\n */\nfunction extractNextDataTagInformation(): NextDataTagInfo {\n  let nextData: SentryEnhancedNextData | undefined;\n  // Let's be on the safe side and actually check first if there is really a __NEXT_DATA__ script tag on the page.\n  // Theoretically this should always be the case though.\n  const nextDataTag = globalObject.document.getElementById('__NEXT_DATA__');\n  if (nextDataTag && nextDataTag.innerHTML) {\n    try {\n      nextData = JSON.parse(nextDataTag.innerHTML);\n    } catch (e) {\n      DEBUG_BUILD && logger.warn('Could not extract __NEXT_DATA__');\n    }\n  }\n\n  if (!nextData) {\n    return {};\n  }\n\n  const nextDataTagInfo: NextDataTagInfo = {};\n\n  const { page, query, props } = nextData;\n\n  // `nextData.page` always contains the parameterized route - except for when an error occurs in a data fetching\n  // function, then it is \"/_error\", but that isn't a problem since users know which route threw by looking at the\n  // parent transaction\n  // TODO: Actually this is a problem (even though it is not that big), because the DSC and the transaction payload will contain\n  // a different transaction name. Maybe we can fix this. Idea: Also send transaction name via pageProps when available.\n  nextDataTagInfo.route = page;\n  nextDataTagInfo.params = query;\n\n  if (props && props.pageProps) {\n    nextDataTagInfo.sentryTrace = props.pageProps._sentryTraceData;\n    nextDataTagInfo.baggage = props.pageProps._sentryBaggage;\n  }\n\n  return nextDataTagInfo;\n}\n\nconst DEFAULT_TAGS = {\n  'routing.instrumentation': 'next-pages-router',\n} as const;\n\n// We keep track of the active transaction so we can finish it when we start a navigation transaction.\nlet activeTransaction: Transaction | undefined = undefined;\n\n// We keep track of the previous location name so we can set the `from` field on navigation transactions.\n// This is either a route or a pathname.\nlet prevLocationName: string | undefined = undefined;\n\nconst client = getClient();\n\n/**\n * Instruments the Next.js pages router. Only supported for\n * client side routing. Works for Next >= 10.\n *\n * Leverages the SingletonRouter from the `next/router` to\n * generate pageload/navigation transactions and parameterize\n * transaction names.\n */\nexport function pagesRouterInstrumentation(\n  startTransactionCb: StartTransactionCb,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n  startPageloadSpanCallback: StartSpanCb,\n  startNavigationSpanCallback: StartSpanCb,\n): void {\n  const { route, params, sentryTrace, baggage } = extractNextDataTagInformation();\n  // eslint-disable-next-line deprecation/deprecation\n  const { traceparentData, dynamicSamplingContext, propagationContext } = tracingContextFromHeaders(\n    sentryTrace,\n    baggage,\n  );\n\n  getCurrentScope().setPropagationContext(propagationContext);\n  prevLocationName = route || globalObject.location.pathname;\n\n  if (startTransactionOnPageLoad) {\n    const source = route ? 'route' : 'url';\n    const transactionContext = {\n      name: prevLocationName,\n      op: 'pageload',\n      origin: 'auto.pageload.nextjs.pages_router_instrumentation',\n      tags: DEFAULT_TAGS,\n      // pageload should always start at timeOrigin (and needs to be in s, not ms)\n      startTimestamp: browserPerformanceTimeOrigin ? browserPerformanceTimeOrigin / 1000 : undefined,\n      ...(params && client && client.getOptions().sendDefaultPii && { data: params }),\n      ...traceparentData,\n      metadata: {\n        source,\n        dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      },\n    } as const;\n    activeTransaction = startTransactionCb(transactionContext);\n    startPageloadSpanCallback(transactionContext);\n  }\n\n  if (startTransactionOnLocationChange) {\n    Router.events.on('routeChangeStart', (navigationTarget: string) => {\n      const strippedNavigationTarget = stripUrlQueryAndFragment(navigationTarget);\n      const matchedRoute = getNextRouteFromPathname(strippedNavigationTarget);\n\n      let transactionName: string;\n      let transactionSource: TransactionSource;\n\n      if (matchedRoute) {\n        transactionName = matchedRoute;\n        transactionSource = 'route';\n      } else {\n        transactionName = strippedNavigationTarget;\n        transactionSource = 'url';\n      }\n\n      const tags: Record<string, Primitive> = {\n        ...DEFAULT_TAGS,\n        from: prevLocationName,\n      };\n\n      prevLocationName = transactionName;\n\n      if (activeTransaction) {\n        activeTransaction.end();\n      }\n\n      const transactionContext = {\n        name: transactionName,\n        op: 'navigation',\n        origin: 'auto.navigation.nextjs.pages_router_instrumentation',\n        tags,\n        metadata: { source: transactionSource },\n      } as const;\n      const navigationTransaction = startTransactionCb(transactionContext);\n      startNavigationSpanCallback(transactionContext);\n\n      if (navigationTransaction) {\n        // In addition to the navigation transaction we're also starting a span to mark Next.js's `routeChangeStart`\n        // and `routeChangeComplete` events.\n        // We don't want to finish the navigation transaction on `routeChangeComplete`, since users might want to attach\n        // spans to that transaction even after `routeChangeComplete` is fired (eg. HTTP requests in some useEffect\n        // hooks). Instead, we'll simply let the navigation transaction finish itself (it's an `IdleTransaction`).\n        // eslint-disable-next-line deprecation/deprecation\n        const nextRouteChangeSpan = navigationTransaction.startChild({\n          op: 'ui.nextjs.route-change',\n          origin: 'auto.ui.nextjs.pages_router_instrumentation',\n          description: 'Next.js Route Change',\n        });\n\n        const finishRouteChangeSpan = (): void => {\n          nextRouteChangeSpan.end();\n          Router.events.off('routeChangeComplete', finishRouteChangeSpan);\n        };\n\n        Router.events.on('routeChangeComplete', finishRouteChangeSpan);\n      }\n    });\n  }\n}\n\nfunction getNextRouteFromPathname(pathname: string): string | undefined {\n  const pageRoutes = (globalObject.__BUILD_MANIFEST || {}).sortedPages;\n\n  // Page route should in 99.999% of the cases be defined by now but just to be sure we make a check here\n  if (!pageRoutes) {\n    return;\n  }\n\n  return pageRoutes.find(route => {\n    const routeRegExp = convertNextRouteToRegExp(route);\n    return pathname.match(routeRegExp);\n  });\n}\n\n/**\n * Converts a Next.js style route to a regular expression that matches on pathnames (no query params or URL fragments).\n *\n * In general this involves replacing any instances of square brackets in a route with a wildcard:\n * e.g. \"/users/[id]/info\" becomes /\\/users\\/([^/]+?)\\/info/\n *\n * Some additional edgecases need to be considered:\n * - All routes have an optional slash at the end, meaning users can navigate to \"/users/[id]/info\" or\n *   \"/users/[id]/info/\" - both will be resolved to \"/users/[id]/info\".\n * - Non-optional \"catchall\"s at the end of a route must be considered when matching (e.g. \"/users/[...params]\").\n * - Optional \"catchall\"s at the end of a route must be considered when matching (e.g. \"/users/[[...params]]\").\n *\n * @param route A Next.js style route as it is found in `global.__BUILD_MANIFEST.sortedPages`\n */\nfunction convertNextRouteToRegExp(route: string): RegExp {\n  // We can assume a route is at least \"/\".\n  const routeParts = route.split('/');\n\n  let optionalCatchallWildcardRegex = '';\n  if (routeParts[routeParts.length - 1].match(/^\\[\\[\\.\\.\\..+\\]\\]$/)) {\n    // If last route part has pattern \"[[...xyz]]\" we pop the latest route part to get rid of the required trailing\n    // slash that would come before it if we didn't pop it.\n    routeParts.pop();\n    optionalCatchallWildcardRegex = '(?:/(.+?))?';\n  }\n\n  const rejoinedRouteParts = routeParts\n    .map(\n      routePart =>\n        routePart\n          .replace(/^\\[\\.\\.\\..+\\]$/, '(.+?)') // Replace catch all wildcard with regex wildcard\n          .replace(/^\\[.*\\]$/, '([^/]+?)'), // Replace route wildcards with lazy regex wildcards\n    )\n    .join('/');\n\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- routeParts are from the build manifest, so no raw user input\n  return new RegExp(\n    `^${rejoinedRouteParts}${optionalCatchallWildcardRegex}(?:/)?$`, // optional slash at the end\n  );\n}\n"],"names":[],"mappings":"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"}