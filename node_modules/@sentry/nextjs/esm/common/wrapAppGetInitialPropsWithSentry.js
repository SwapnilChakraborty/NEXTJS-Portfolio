import { _nullishCoalesce, _optionalChain } from '@sentry/utils';
import { addTracingExtensions, getActiveSpan, spanToTraceHeader, getDynamicSamplingContextFromSpan, getClient, getRootSpan } from '@sentry/core';
import { dynamicSamplingContextToSentryBaggageHeader } from '@sentry/utils';
import { isBuild } from './utils/isBuild.js';
import { withTracedServerSideDataFetcher, getSpanFromRequest, withErrorInstrumentation } from './utils/wrapperUtils.js';

/**
 * Create a wrapped version of the user's exported `getInitialProps` function in
 * a custom app ("_app.js").
 *
 * @param origAppGetInitialProps The user's `getInitialProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function wrapAppGetInitialPropsWithSentry(origAppGetInitialProps) {
  return new Proxy(origAppGetInitialProps, {
    apply: async (wrappingTarget, thisArg, args) => {
      if (isBuild()) {
        return wrappingTarget.apply(thisArg, args);
      }

      addTracingExtensions();

      const [context] = args;
      const { req, res } = context.ctx;

      const errorWrappedAppGetInitialProps = withErrorInstrumentation(wrappingTarget);
      const options = _optionalChain([getClient, 'call', _ => _(), 'optionalAccess', _2 => _2.getOptions, 'call', _3 => _3()]);

      // Generally we can assume that `req` and `res` are always defined on the server:
      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object
      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher
      // span with each other when there are no req or res objects, we simply do not trace them at all here.
      if (req && res && _optionalChain([options, 'optionalAccess', _4 => _4.instrumenter]) === 'sentry') {
        const tracedGetInitialProps = withTracedServerSideDataFetcher(errorWrappedAppGetInitialProps, req, res, {
          dataFetcherRouteName: '/_app',
          requestedRouteName: context.ctx.pathname,
          dataFetchingMethodName: 'getInitialProps',
        });

        const appGetInitialProps

 = await tracedGetInitialProps.apply(thisArg, args);

        const activeSpan = getActiveSpan();
        const requestSpan = _nullishCoalesce(getSpanFromRequest(req), () => ( (activeSpan ? getRootSpan(activeSpan) : undefined)));

        // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call
        // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per
        // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.
        // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.
        if (!appGetInitialProps.pageProps) {
          appGetInitialProps.pageProps = {};
        }

        if (requestSpan) {
          appGetInitialProps.pageProps._sentryTraceData = spanToTraceHeader(requestSpan);
          const dynamicSamplingContext = getDynamicSamplingContextFromSpan(requestSpan);
          appGetInitialProps.pageProps._sentryBaggage =
            dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);
        }

        return appGetInitialProps;
      } else {
        return errorWrappedAppGetInitialProps.apply(thisArg, args);
      }
    },
  });
}

/**
 * @deprecated Use `wrapAppGetInitialPropsWithSentry` instead.
 */
const withSentryServerSideAppGetInitialProps = wrapAppGetInitialPropsWithSentry;

export { withSentryServerSideAppGetInitialProps, wrapAppGetInitialPropsWithSentry };
//# sourceMappingURL=wrapAppGetInitialPropsWithSentry.js.map
