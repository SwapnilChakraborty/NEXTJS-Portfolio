import { Integrations as Integrations$1, RequestData } from '@sentry/core';
export { Hub, SDK_VERSION, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, Scope, addBreadcrumb, addEventProcessor, addGlobalEventProcessor, addIntegration, captureCheckIn, captureEvent, captureException, captureMessage, close, configureScope, continueTrace, createTransport, extractTraceparentData, flush, functionToStringIntegration, getActiveSpan, getActiveTransaction, getClient, getCurrentHub, getCurrentScope, getGlobalScope, getHubFromCarrier, getIsolationScope, getSpanStatusFromHttpCode, inboundFiltersIntegration, isInitialized, lastEventId, linkedErrorsIntegration, makeMain, metrics, requestDataIntegration, runWithAsyncContext, setContext, setCurrentClient, setExtra, setExtras, setHttpStatus, setMeasurement, setTag, setTags, setUser, spanStatusfromHttpCode, startInactiveSpan, startSpan, startSpanManual, startTransaction, trace, withActiveSpan, withIsolationScope, withMonitor, withScope } from '@sentry/core';
export { VercelEdgeClient } from './client.js';
export { defaultIntegrations, getDefaultIntegrations, init } from './sdk.js';
import { WinterCGFetch } from './integrations/wintercg-fetch.js';
export { winterCGFetchIntegration } from './integrations/wintercg-fetch.js';

/** @deprecated Import the integration function directly, e.g. `inboundFiltersIntegration()` instead of `new Integrations.InboundFilter(). */
const Integrations = {
  // eslint-disable-next-line deprecation/deprecation
  ...Integrations$1,
  WinterCGFetch,
  RequestData,
};

export { Integrations };
//# sourceMappingURL=index.js.map
