export type { Breadcrumb, BreadcrumbHint, PolymorphicRequest, Request, SdkInfo, Event, EventHint, Exception, Session, Severity, SeverityLevel, Span, StackFrame, Stacktrace, Thread, Transaction, User, } from '@sentry/types';
export type { AddRequestDataToEventOptions } from '@sentry/utils';
export type { VercelEdgeOptions } from './types';
export { addGlobalEventProcessor, addEventProcessor, addBreadcrumb, addIntegration, captureException, captureEvent, captureMessage, close, configureScope, createTransport, extractTraceparentData, flush, getActiveTransaction, getHubFromCarrier, getCurrentHub, getClient, isInitialized, getCurrentScope, getGlobalScope, getIsolationScope, Hub, lastEventId, makeMain, setCurrentClient, runWithAsyncContext, Scope, startTransaction, SDK_VERSION, setContext, setExtra, setExtras, setTag, setTags, setUser, spanStatusfromHttpCode, getSpanStatusFromHttpCode, setHttpStatus, trace, withScope, withIsolationScope, captureCheckIn, withMonitor, setMeasurement, getActiveSpan, startSpan, startInactiveSpan, startSpanManual, withActiveSpan, continueTrace, metrics, functionToStringIntegration, inboundFiltersIntegration, linkedErrorsIntegration, requestDataIntegration, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, } from '@sentry/core';
export type { SpanStatusType } from '@sentry/core';
export { VercelEdgeClient } from './client';
export { defaultIntegrations, getDefaultIntegrations, init, } from './sdk';
export { winterCGFetchIntegration } from './integrations/wintercg-fetch';
/** @deprecated Import the integration function directly, e.g. `inboundFiltersIntegration()` instead of `new Integrations.InboundFilter(). */
export declare const Integrations: {
    WinterCGFetch: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: () => void;
    }> & (new (options?: Partial<import("./integrations/wintercg-fetch").Options> | undefined) => import("@sentry/types").Integration);
    RequestData: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        processEvent: (event: import("@sentry/types").Event, hint: import("@sentry/types").EventHint, client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => import("@sentry/types").Event;
    }> & (new (options?: {
        include?: {
            cookies?: boolean | undefined;
            data?: boolean | undefined;
            headers?: boolean | undefined;
            ip?: boolean | undefined;
            query_string?: boolean | undefined;
            url?: boolean | undefined;
            user?: boolean | {
                id?: boolean | undefined;
                username?: boolean | undefined;
                email?: boolean | undefined;
            } | undefined;
        } | undefined;
        transactionNamingScheme?: import("@sentry/utils").TransactionNamingScheme | undefined;
    } | undefined) => import("@sentry/types").Integration);
    FunctionToString: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: () => void;
    }>;
    InboundFilters: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        preprocessEvent: (event: import("@sentry/types").Event, hint: import("@sentry/types").EventHint, client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: Partial<{
        allowUrls: (string | RegExp)[];
        denyUrls: (string | RegExp)[];
        ignoreErrors: (string | RegExp)[];
        ignoreTransactions: (string | RegExp)[];
        ignoreInternal: boolean;
        disableErrorDefaults: boolean;
        disableTransactionDefaults: boolean;
    }> | undefined) => import("@sentry/types").Integration);
    LinkedErrors: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        preprocessEvent: (event: import("@sentry/types").Event, hint: import("@sentry/types").EventHint, client: import("@sentry/types").Client<import("@sentry/types").ClientOptions<import("@sentry/types").BaseTransportOptions>>) => void;
    }> & (new (options?: {
        key?: string | undefined;
        limit?: number | undefined;
    } | undefined) => import("@sentry/types").Integration);
};
//# sourceMappingURL=index.d.ts.map